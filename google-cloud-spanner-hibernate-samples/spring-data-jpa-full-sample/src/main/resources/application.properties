
# The example uses the Cloud Spanner dialect that is maintained by Google.
spring.jpa.database-platform=com.google.cloud.spanner.hibernate.SpannerDialect

# Defining these properties here makes it a bit easier to build the connection string.
# Change these to match your Cloud Spanner database.
spanner.project=my-project
spanner.instance=my-instance
spanner.database=my-database
# The sample by default uses the Cloud Spanner emulator.
# Set to false for running on real Cloud Spanner.
spanner.emulator=true

spring.datasource.driver-class-name=com.google.cloud.spanner.jdbc.JdbcDriver
spring.datasource.url=jdbc:cloudspanner:${spanner.host}/projects/${spanner.project}/instances/${spanner.instance}/databases/${spanner.database}?autoConfigEmulator=${spanner.emulator}${spanner.connectionProperties}

# Automatically create/update the database schema.
spring.jpa.hibernate.ddl-auto=update

# Set this property to true to see all SQL statements that are being executed.
spring.jpa.show-sql=false

# Enable JDBC batching. This will improve the performance of the application, as most inserts and
# updates will be sent in batches instead of individual statements to Cloud Spanner.
spring.jpa.properties.hibernate.jdbc.batch_size=50
# order_inserts=true will order the inserts by entity type. This enables Hibernate to batch more
# statements.
spring.jpa.properties.hibernate.order_inserts=true

# Used for testing.
spanner.host=
spanner.connectionProperties=
