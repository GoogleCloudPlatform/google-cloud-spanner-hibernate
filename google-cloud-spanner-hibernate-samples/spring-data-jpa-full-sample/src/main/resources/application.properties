# The example uses the Cloud Spanner dialect that is maintained by Google.
# The dialect is automatically selected based on the JDBC connection URL.
# It is therefore not necessary to explicitly set it in the configuration.

# spring.jpa.database-platform=com.google.cloud.spanner.hibernate.SpannerDialect

# ------- Spanner configuration ------- #

# Defining these properties here makes it a bit easier to build the connection string.
# Change these to match your Cloud Spanner database.
spanner.project=my-project
spanner.instance=my-instance
spanner.database=my-database
# The sample by default uses the Cloud Spanner emulator.
# Set to false for running on real Cloud Spanner.
spanner.emulator=true
spring.datasource.driver-class-name=com.google.cloud.spanner.jdbc.JdbcDriver
spring.datasource.url=jdbc:cloudspanner:${spanner.host}/projects/${spanner.project}/instances/${spanner.instance}/databases/${spanner.database}?autoConfigEmulator=${spanner.emulator};enableExtendedTracing=${open_telemetry.enable_extended_tracing};enableApiTracing=${open_telemetry.enable_api_tracing}${spanner.connectionProperties}

# ------- Hibernate configuration ------- #

# Automatically create/update the database schema.
spring.jpa.hibernate.ddl-auto=update
# Set this property to true to see all SQL statements that are being executed.
spring.jpa.show-sql=false
# Enable JDBC batching. This will improve the performance of the application, as most inserts and
# updates will be sent in batches instead of individual statements to Cloud Spanner.
spring.jpa.properties.hibernate.jdbc.batch_size=50
# order_inserts=true will order the inserts by entity type. This enables Hibernate to batch more
# statements.
spring.jpa.properties.hibernate.order_inserts=true

# ------- OpenTelemetry configuration ------- #

# Enable/disable OpenTelemetry tracing in the JDBC driver and export these to Google Cloud Trace.
open_telemetry.enabled=true
open_telemetry.project=${spanner.project}

# Sets the service name for OpenTelemetry. If empty, a unique service name is generated.
open_telemetry.service_name=

# These properties determine the level of tracing that is used by the Spanner JDBC driver.

# enable_extended_tracing will add the SQL statement that is being executed to each trace. This
# should only be enabled if your SQL statements do not contain any sensitive data.
open_telemetry.enable_extended_tracing=true

# enable_api_tracing adds a trace for each gRPC API call that is executed by the JDBC driver.
# This can be useful for determining exactly which calls are being executed by your application, or
# to determine whether a service in your application is slow due to transactions or API calls are
# being retried.
open_telemetry.enable_api_tracing=true

# ------- Test configuration ------- #

# Used for testing.
spanner.host=
spanner.connectionProperties=
