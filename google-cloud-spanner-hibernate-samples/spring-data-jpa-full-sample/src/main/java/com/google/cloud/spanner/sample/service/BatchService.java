/*
 * Copyright 2019-2024 Google LLC
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
 */

package com.google.cloud.spanner.sample.service;

import com.google.cloud.spanner.hibernate.TransactionTag;
import com.google.cloud.spanner.sample.entities.Album;
import com.google.cloud.spanner.sample.entities.Concert;
import com.google.cloud.spanner.sample.entities.Singer;
import com.google.cloud.spanner.sample.entities.Venue;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.transaction.Transactional;
import java.util.List;
import org.hibernate.Session;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

/**
 * This service uses the 'auto_batch_dml' flag in the Spanner JDBC driver to execute multiple DML
 * statements as a single ExecuteBatchDml request on Spanner. This can significantly reduce the
 * number of round-trips that are needed to Spanner when inserting/updating/deleting a large number
 * of different entities.
 */
@Service
public class BatchService {

  private static final Logger log = LoggerFactory.getLogger(BatchService.class);

  private final SingerService singerService;
  private final AlbumService albumService;
  private final TrackService trackService;
  private final VenueService venueService;
  private final ConcertService concertService;
  private final TicketSaleService ticketSaleService;
  @PersistenceContext private EntityManager entityManager;

  public BatchService(
      SingerService singerService,
      AlbumService albumService,
      TrackService trackService,
      VenueService venueService,
      ConcertService concertService,
      TicketSaleService ticketSaleService) {
    this.singerService = singerService;
    this.albumService = albumService;
    this.trackService = trackService;
    this.venueService = venueService;
    this.concertService = concertService;
    this.ticketSaleService = ticketSaleService;
  }

  /**
   * This utility method enables the 'auto_batch_dml' flag in the Spanner JDBC driver and then
   * executes the given {@link Runnable}. After finishing, the Hibernate session is flushed to force
   * all DML statements to be generated by Hibernate and sent to the JDBC driver, and then the
   * 'auto_batch_dml' flag is cleared.
   */
  private void runWithAutoBatchDml(Runnable runnable) {
    // Enable auto_batch_dml on the JDBC connection and run the runnable.
    // Then flush the Hibernate session and reset the JDBC connection.
    Session session = entityManager.unwrap(Session.class);
    try {
      session.doWork(connection -> connection.createStatement().execute("set auto_batch_dml=true"));
      runnable.run();
      session.flush();
    } finally {
      session.doWork(
          connection -> connection.createStatement().execute("set auto_batch_dml=false"));
    }
  }

  @Transactional
  public void deleteAllData() {
    log.info("Deleting all existing data");
    runWithAutoBatchDml(
        () -> {
          ticketSaleService.deleteAllTicketSales();
          concertService.deleteAllConcerts();
          albumService.deleteAllAlbums();
          singerService.deleteAllSingers();
        });
  }

  /**
   * Generates some random data for this sample application in a single ExecuteBatchDml request.
   * This service achieves this by using the 'auto_batch_dml' flag in the Spanner JDBC driver. This
   * flag instructs the JDBC driver to buffer all DML statements that it receives, until it sees
   * either a query or a Commit. This service enables the flag at the start of the method, then
   * generates all the data that it wants to insert (and makes sure that it does not trigger any
   * queries while doing so), triggers a Hibernate flush, and then turns off the flag again.
   *
   * <p>The {@link TransactionTag} annotation adds a transaction tag to the read/write transaction
   * and all the statements that are executed in this transaction. This tag only works if you also
   * add a {@link com.google.cloud.spanner.hibernate.TransactionTagInterceptor} to your Hibernate
   * configuration. See {@link com.google.cloud.spanner.sample.TaggingHibernatePropertiesCustomizer}
   * for how this is done in this sample application.
   */
  @Transactional
  @TransactionTag("generate_random_data")
  public void generateRandomData() {
    runWithAutoBatchDml(
        () -> {
          List<Singer> singers = singerService.generateRandomSingers(10);
          log.info("Created 10 singers");
          List<Album> albums = albumService.generateRandomAlbums(singers, 30);
          log.info("Created 30 albums");
          trackService.generateRandomTracks(albums, 15);
          log.info("Created 20 tracks each for 30 albums");

          List<Venue> venues = venueService.generateRandomVenues(20);
          log.info("Created 20 venues");
          List<Concert> concerts = concertService.generateRandomConcerts(singers, venues, 50);
          log.info("Created 50 concerts");
          ticketSaleService.generateRandomTicketSales(concerts, 250);
          log.info("Created 250 ticket sales");
        });
  }
}
