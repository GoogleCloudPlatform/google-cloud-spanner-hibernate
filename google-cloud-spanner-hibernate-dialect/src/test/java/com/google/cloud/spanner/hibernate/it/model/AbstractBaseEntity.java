/*
 * Copyright 2019-2023 Google LLC
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
 */

package com.google.cloud.spanner.hibernate.it.model;

import com.google.cloud.spanner.hibernate.BitReversedSequenceStyleGenerator;
import java.time.Instant;
import java.util.Objects;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.MappedSuperclass;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;
import org.hibernate.annotations.UpdateTimestamp;
import org.hibernate.id.enhanced.SequenceStyleGenerator;

@MappedSuperclass
public class AbstractBaseEntity {

  @Id
  @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "entity_id_generator")
  @GenericGenerator(
      name = "entity_id_generator",
      // TODO: Switch to PooledBitReversedSequenceStyleGenerator when that is available and the
      //       emulator supports it.
      strategy = "com.google.cloud.spanner.hibernate.BitReversedSequenceStyleGenerator",
      parameters = {
          // Use a separate name for each entity to ensure that it uses a separate table.
          @Parameter(name = SequenceStyleGenerator.SEQUENCE_PARAM, value = "entity_id"),
          @Parameter(name = SequenceStyleGenerator.INCREMENT_PARAM, value = "1000"),
          @Parameter(name = SequenceStyleGenerator.INITIAL_PARAM, value = "50000"),
          // Add any ranges that should be excluded by the generator if your table already
          // contains existing values that have been generated by other generators.
          @Parameter(name = BitReversedSequenceStyleGenerator.EXCLUDE_RANGES_PARAM,
              value = "[1,1000] [10000,20000]"),
      })
  private Long id;

  // TODO: Update this to use the database as a source for the timestamp.
  @CreationTimestamp
  private Instant createdAt;

  // TODO: Update this to use the database as a source for the timestamp.
  @UpdateTimestamp
  private Instant updatedAt;

  protected AbstractBaseEntity() {
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof AbstractBaseEntity)) {
      return false;
    }
    AbstractBaseEntity that = (AbstractBaseEntity) o;
    if (getId() == null || that.getId() == null) {
      return false;
    }
    return Objects.equals(getId(), that.getId());
  }

  @Override
  public int hashCode() {
    return Objects.hash(getId());
  }

  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public Instant getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Instant createdAt) {
    this.createdAt = createdAt;
  }

  public Instant getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(Instant updatedAt) {
    this.updatedAt = updatedAt;
  }
}
